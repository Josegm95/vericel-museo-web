{"version":3,"sources":["Requests/prismic.js","Components/Header/header.jsx","Components/Slider/slider.jsx","Components/Footer/footer.jsx","Pages/Home/home.jsx","Pages/Order/order.jsx","Pages/Specimen/specimen.jsx","App.js","serviceWorker.js","index.js"],"names":["prismicRequest","predicatePath","value","callback","Prismic","client","accessToken","query","Predicates","at","then","response","Header","useState","orders","setOrders","families","setFamilies","specimens","setSpecimens","useEffect","data","className","to","results","map","order","index","key","slugs","nombre","text","filter","family","tags","specimen","includes","Slider","slider","setSlider","amount","setAmount","slide","setSlide","sliderContainer","useRef","slideCarousel","slideNumber","size","current","offsetWidth","style","transform","nextImg","imagenesurl","length","intervalId","setInterval","clearInterval","onClick","ref","imageUrl","src","alt","item","Footer","setData","titulo","contenido","Home","parrafo","imageurl","url","descripcion","Order","match","params","type","imagenurl","specie","Specimen","total_results_size","url_imagen","primer_reporte","sinonimia","nombre_comun","bionomia","paragraph","imagen_distribucion","lista_distribucion","importancia_medica","importancia_veterinaria","taxonomia","url_imagen_claves","titulo_claves","claves_taxonomicas","clave","referencias","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f30289ef.chunk.js","sourcesContent":["import Prismic from 'prismic-javascript';\n\nexport const prismicRequest = (predicatePath, value, callback) => {\n  const apiEndpoint = 'https://museovericel.cdn.prismic.io/api/v2';\n  const accessToken =\n    'MC5YaU1SZUJBQUFDVUFmSlNw.A--_vQbvv71laWjvv70VDABC77-977-9Pxfvv73vv71t77-9XGTvv73vv73vv73vv73vv71LMXrvv70i';\n  const Client = Prismic.client(apiEndpoint, { accessToken });\n\n  Client.query(Prismic.Predicates.at(predicatePath, value)).then(response => {\n    callback(response);\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { prismicRequest } from '../../Requests/prismic';\nimport { Link } from 'react-router-dom';\nimport './header.scss';\n\nconst Header = () => {\n  const [orders, setOrders] = useState(null);\n  const [families, setFamilies] = useState(null);\n  const [specimens, setSpecimens] = useState(null);\n\n  useEffect(() => {\n    prismicRequest('document.type', 'orden', data => {\n      setOrders(data);\n    });\n    prismicRequest('document.type', 'familia', data => {\n      setFamilies(data);\n    });\n    prismicRequest('document.type', 'especimen', data => {\n      setSpecimens(data);\n    });\n  }, []);\n\n  return (\n    <header className=\"header-container\">\n      <nav>\n        <ul className=\"menu-container\">\n          <li className=\"menu__item\">\n            <Link to=\"/\">Inicio</Link>\n          </li>\n          {orders\n            ? orders.results.map((order, index) => (\n                <li key={index} className=\"menu__item\">\n                  <Link to={`/orden/${order.slugs[0]}`}>\n                    {order.data.nombre[0].text}\n                  </Link>\n                  <div className=\"submenu-container\">\n                    {families\n                      ? families.results\n                          .filter(family => family.tags[0] === order.slugs[0])\n                          .map((family, index) => (\n                            <div key={index} className=\"submenu\">\n                              <span to=\"/\">{family.data.nombre[0].text}</span>\n                              <ul>\n                                {specimens\n                                  ? specimens.results\n                                      .filter(specimen =>\n                                        specimen.tags.includes(family.slugs[0])\n                                      )\n                                      .map((specimen, index) => (\n                                        <li\n                                          key={index}\n                                          className=\"submenu__item\"\n                                        >\n                                          <Link\n                                            to={`/especimen/${specimen.slugs[0]}`}\n                                          >\n                                            {specimen.data.nombre[0].text}\n                                          </Link>\n                                        </li>\n                                      ))\n                                  : null}\n                              </ul>\n                            </div>\n                          ))\n                      : null}\n                  </div>\n                </li>\n              ))\n            : null}\n          <li className=\"menu__item\">\n            <Link to=\"/nosotros\">Nosotros</Link>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { prismicRequest } from '../../Requests/prismic';\nimport './slider.scss';\n\nconst Slider = () => {\n  const [slider, setSlider] = useState(null);\n  const [amount, setAmount] = useState(null);\n  const [slide, setSlide] = useState(0);\n  const sliderContainer = useRef(null);\n\n  const slideCarousel = slideNumber => {\n    const size = sliderContainer.current.offsetWidth;\n    sliderContainer.current.style.transform = `translateX(${-size *\n      slideNumber}px)`;\n\n    return slideNumber;\n  };\n\n  const previusImg = () => {\n    if (slide > 0) {\n      setSlide(slideCarousel(slide - 1));\n    } else {\n      setSlide(slideCarousel(amount - 1));\n    }\n  };\n\n  const nextImg = () => {\n    if (slide < amount - 1) {\n      setSlide(slideCarousel(slide + 1));\n    } else {\n      setSlide(slideCarousel(0));\n    }\n  };\n\n  useEffect(() => {\n    prismicRequest('my.slider.uid', 'homeslider', data => {\n      setSlider(data);\n      setAmount(data.results[0].data.imagenesurl.length);\n    });\n  }, []);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      nextImg();\n    }, 3000);\n\n    return () => clearInterval(intervalId);\n  });\n\n  return (\n    <div className=\"slider-container\">\n      <button\n        className=\"slider__icon-left\"\n        onClick={() => {\n          previusImg();\n        }}\n      >\n        <i className=\"fas fa-chevron-left \" />\n      </button>\n      <div ref={sliderContainer} className=\"slider__images-container\">\n        {slider\n          ? slider.results[0].data.imagenesurl.map((imageUrl, index) => (\n              <img src={imageUrl.text} alt=\"\" key={index} />\n            ))\n          : null}\n      </div>\n      <button\n        className=\"slider__icon-right\"\n        onClick={() => {\n          nextImg();\n        }}\n      >\n        <i className=\"fas fa-chevron-right \" />\n      </button>\n      <div className=\"slider__dots-container\">\n        {slider\n          ? slider.results[0].data.imagenesurl.map((item, index) => (\n              <span\n                key={index}\n                className={`slider__dot ${\n                  slide === index ? 'slider__dot--selected' : null\n                }`}\n                onClick={() => {\n                  setSlide(slideCarousel(index));\n                }}\n              />\n            ))\n          : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Slider;\n","import React, { useState, useEffect } from 'react';\nimport { prismicRequest } from '../../Requests/prismic';\nimport './footer.scss';\n\nconst Footer = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    prismicRequest('document.type', 'footer', data => {\n      setData(data);\n    });\n  }, []);\n\n  return (\n    <section className=\"footer-container\">\n      {data ? (\n        <>\n          <h2>{data.results[0].data.titulo[0].text}</h2>\n          <div className=\"footer__content\">\n            {data.results[0].data.contenido.map((item, index) => {\n              return <p key={index}>{item.text}</p>;\n            })}\n          </div>\n        </>\n      ) : null}\n    </section>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from 'react';\nimport { Slider } from '../../Components/components';\nimport { prismicRequest } from '../../Requests/prismic';\nimport { Link } from 'react-router-dom';\nimport './home.scss';\n\nconst Home = () => {\n  const [data, setData] = useState(null);\n  const [orders, setOrders] = useState(null);\n\n  useEffect(() => {\n    prismicRequest('document.type', 'homepage', data => {\n      setData(data);\n    });\n    prismicRequest('document.type', 'orden', data => {\n      setOrders(data);\n    });\n  }, []);\n\n  return (\n    <section className=\"home-container max-width-limit\">\n      <Slider />\n      <section className=\"home__description\">\n        {data ? (\n          <>\n            <h1>{data.results[0].data.titulo[0].text}</h1>\n            <p>{data.results[0].data.parrafo[0].text}</p>\n          </>\n        ) : null}\n      </section>\n      <section className=\"home__orders-container\">\n        <h2>Principales Ordenes</h2>\n        <div className=\"home__orders\">\n          {orders\n            ? orders.results.map((order, index) => (\n                <Link key={index} to={`/orden/${order.slugs[0]}`}>\n                  <article className=\"home__order\">\n                    <img src={order.data.imageurl.url} alt=\"\" />\n                    <div className=\"home__order__description\">\n                      <h2>{order.data.nombre[0].text}</h2>\n                      <p>{order.data.descripcion[0].text}</p>\n                    </div>\n                  </article>\n                </Link>\n              ))\n            : null}\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { prismicRequest } from '../../Requests/prismic';\nimport { Link } from 'react-router-dom';\nimport './order.scss';\n\nconst Order = ({\n  match: {\n    params: { order }\n  }\n}) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    prismicRequest('document.tags', [order], data => {\n      setData(data);\n    });\n  }, [order]);\n\n  return (\n    <section>\n      {data\n        ? data.results\n            .filter(item => item.type === 'familia')\n            .map((family, index) => (\n              <article key={index} className=\"family-container\">\n                <figure className=\"family__image\">\n                  <img src={family.data.imagenurl.url} alt=\"\" />\n                </figure>\n                <div className=\"family__content\">\n                  <h2>{family.data.nombre[0].text}</h2>\n                  <p>{family.data.descripcion[0].text}</p>\n                  <h3>Especies</h3>\n                  <ul>\n                    {data.results\n                      .filter(item => item.tags.includes(family.slugs[0]))\n                      .map((specie, index) => (\n                        <li key={index}>\n                          <Link to={`/especimen/${specie.slugs[0]}`}>\n                            {specie.data.nombre[0].text}\n                          </Link>\n                        </li>\n                      ))}\n                  </ul>\n                </div>\n              </article>\n            ))\n        : null}\n    </section>\n  );\n};\n\nexport default Order;\n","import React, { useState, useEffect } from 'react';\nimport { prismicRequest } from '../../Requests/prismic';\nimport './specimen.scss';\n\nconst Specimen = ({\n  match: {\n    params: { specimen }\n  }\n}) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    prismicRequest('my.especimen.uid', specimen, data => {\n      if (data.total_results_size > 0) {\n        setData(data.results[0].data);\n      }\n    });\n  }, [specimen]);\n\n  return (\n    <section className=\"specimen-container max-width-limit\">\n      {data ? (\n        <>\n          <figure className=\"specimen__img\">\n            <img src={data.url_imagen.url} alt=\"\" />\n          </figure>\n          <section className=\"specimen__description section-container\">\n            <h2>\n              {data.nombre[0].text}\n              <span>{` (${data.primer_reporte[0].text})`}</span>\n            </h2>\n            <h3>Sinonimia</h3>\n            <ul>\n              {data.sinonimia.map((sinonimia, index) => (\n                <li key={index}>{sinonimia.text}</li>\n              ))}\n            </ul>\n            <h3>Nombre común</h3>\n            <ul>\n              {data.nombre_comun.map((item, index) => (\n                <li key={index}>{item.text}</li>\n              ))}\n            </ul>\n          </section>\n          <section className=\"specimen__bionomy section-container section-container--gray\">\n            <h3>Bionomía</h3>\n            {data.bionomia.map((paragraph, index) => (\n              <p key={index}>{paragraph.text}</p>\n            ))}\n          </section>\n          <section className=\"specimen__location section-container\">\n            <h3>Distribución en Colombia</h3>\n            <figure>\n              <img src={data.imagen_distribucion.url} alt=\"\" />\n            </figure>\n            <ol>\n              {data.lista_distribucion.map((item, index) => (\n                <li key={index}>{item.text}</li>\n              ))}\n            </ol>\n          </section>\n          <section className=\"specimen__importance section-container section-container--gray\">\n            <div className=\"specimen__importance__item\">\n              <h3>Importancia Medica</h3>\n              <p>Transmisor de:</p>\n              <ul>\n                {data.importancia_medica.map((item, index) => (\n                  <li key={index}>{item.text}</li>\n                ))}\n              </ul>\n            </div>\n            <div className=\"separator\" />\n            <div className=\"specimen__importance__item\">\n              <h3>Importancia veterinaria</h3>\n              <p>Transmisor de:</p>\n              <ul>\n                {data.importancia_veterinaria.map((item, index) => (\n                  <li key={index}>{item.text}</li>\n                ))}\n              </ul>\n            </div>\n          </section>\n          <section className=\"specimen__taxonomy section-container\">\n            <h3>Taxonomía</h3>\n            {data.taxonomia.map((item, index) => (\n              <div key={index} className=\"specimen__taxonomy__item\">\n                <img src={item.url_imagen_claves.url} alt=\"\" />\n                <div className=\"specimen__taxonomy__claves\">\n                  <h4>{item.titulo_claves[0].text}</h4>\n                  <ul>\n                    {item.claves_taxonomicas.map((clave, index) => (\n                      <li key={index}>{clave.text}</li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            ))}\n          </section>\n          <section className=\"specimen__references section-container section-container--gray\">\n            <h3>Referencias</h3>\n            <ul>\n              {data.referencias.map((item, index) => (\n                <li key={index} className=\"specimen__references__item\">\n                  {item.text}\n                </li>\n              ))}\n            </ul>\n          </section>\n        </>\n      ) : null}\n    </section>\n  );\n};\n\nexport default Specimen;\n","import React from 'react';\nimport { Home, Order, Specimen } from './Pages/pages';\nimport { Header, Footer } from './Components/components';\nimport { Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route path=\"/\" component={Home} exact />\n        <Route path=\"/orden/:order\" component={Order} />\n        <Route path=\"/especimen/:specimen\" component={Specimen} />\n      </Switch>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}